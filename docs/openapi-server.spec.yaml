openapi: 3.1.0
info:
  title: CommuCat Server API
  version: 0.3.0-pre
  description: |
    REST endpoints exposed by the CommuCat secure routing server. The project is
    pre-alpha; request and response contracts may still change. Streaming CCP-1
    traffic is handled over HTTP/2 `/connect` and is documented separately in
    `PROTOCOL.md`.
  contact:
    name: CommuCat Project
    url: https://github.com/ducheved/commucat
  license:
    name: MPL-2.0
    url: https://www.mozilla.org/MPL/2.0/
servers:
  - url: https://{domain}
    description: Production instance
    variables:
      domain:
        default: commucat.example.org
  - url: https://localhost:8443
    description: Local development
security:
  - BearerAuth: []
tags:
  - name: Health
  - name: Metrics
  - name: Server Info
  - name: Friends
  - name: Devices
  - name: Pairing
  - name: P2P
  - name: Security
  - name: Federation
  - name: Real-time
paths:
  /healthz:
    get:
      tags: [Health]
      summary: Liveness check
      security: []
      responses:
        '200':
          description: Service is running
          content:
            text/plain:
              schema:
                type: string
                example: ok
  /readyz:
    get:
      tags: [Health]
      summary: Readiness check
      security: []
      responses:
        '200':
          description: All dependencies reachable
          content:
            text/plain:
              schema:
                type: string
                example: ready
        '503':
          description: Storage or cache unavailable
          content:
            text/plain:
              schema:
                type: string
                example: degraded
  /metrics:
    get:
      tags: [Metrics]
      summary: Prometheus metrics snapshot
      description: Requires the admin token when `[admin.token]` is configured.
      responses:
        '200':
          description: Prometheus metrics exposition format
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: Missing or invalid admin token
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
  /api/server-info:
    get:
      tags: [Server Info]
      summary: Fetch bootstrap parameters for clients
      description: Returns Noise key catalog, session timings, and pairing settings.
      responses:
        '200':
          description: Current server capabilities
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfoResponse'
  /api/friends:
    get:
      tags: [Friends]
      summary: List friends and cached device snapshots
      responses:
        '200':
          description: Friends with device summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendListResponse'
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags: [Friends]
      summary: Replace friend list
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendUpdateRequest'
      responses:
        '200':
          description: Updated friend list and device snapshots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendListResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/friends/{friendId}/devices:
    get:
      tags: [Friends]
      summary: Get device snapshots for a specific friend
      parameters:
        - $ref: '#/components/parameters/FriendId'
      responses:
        '200':
          description: Device snapshots for the friend
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendDevicesResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/users/me/avatar:
    post:
      tags: [Users]
      summary: Upload user avatar
      description: Accepts raw image data (JPEG/PNG/WebP/GIF). Max 5 MB.
      requestBody:
        required: true
        content:
          image/*:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Avatar stored successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AvatarUploadResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/friends/requests:
    get:
      tags: [Friends]
      summary: List incoming/outgoing friend requests
      responses:
        '200':
          description: Pending friend requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestsResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/friends/requests/{userId}:
    post:
      tags: [Friends]
      summary: Create a friend request (local or federated)
      parameters:
        - $ref: '#/components/parameters/FriendId'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FriendRequestCreate'
      responses:
        '201':
          description: Friend request created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestEnvelope'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/friends/requests/{userId}/accept:
    post:
      tags: [Friends]
      summary: Accept an incoming friend request
      parameters:
        - $ref: '#/components/parameters/FriendId'
      responses:
        '200':
          description: Request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestAcceptResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/friends/requests/{userId}/reject:
    post:
      tags: [Friends]
      summary: Reject an incoming friend request
      parameters:
        - $ref: '#/components/parameters/FriendId'
      responses:
        '200':
          description: Request rejected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendRequestRejectResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/friends/{userId}:
    delete:
      tags: [Friends]
      summary: Remove a friend
      parameters:
        - $ref: '#/components/parameters/FriendId'
      responses:
        '200':
          description: Friend removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FriendDeleteResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/pair:
    post:
      tags: [Pairing]
      summary: Issue a pairing code for a new device
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairCreateRequest'
      responses:
        '200':
          description: Pairing code created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairCreateResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/pair/claim:
    post:
      tags: [Pairing]
      summary: Claim a pairing code and mint device keys
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PairClaimRequest'
      responses:
        '200':
          description: Device credentials issued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairClaimResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/p2p/assist:
    post:
      tags: [P2P]
      summary: Experimental transport assistance endpoint
      description: Returns draft advice for multi-path/obfuscated transports.
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/P2pAssistRequest'
      responses:
        '200':
          description: Advice payload (experimental)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/P2pAssistResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/security-stats:
    get:
      tags: [Security]
      summary: Snapshot of security-related counters (experimental)
      security: []
      responses:
        '200':
          description: Security metrics snapshot
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySnapshot'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/device/csr:
    post:
      tags: [Devices]
      summary: Submit a device rotation proof
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRotationRequest'
      responses:
        '200':
          description: Rotation applied and certificate reissued
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceRotationResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/devices:
    get:
      tags: [Devices]
      summary: List devices for the authenticated user
      responses:
        '200':
          description: Device list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DevicesListResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /api/devices/revoke:
    post:
      tags: [Devices]
      summary: Revoke a device session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeviceRevokeRequest'
      responses:
        '200':
          description: Device revoked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeviceRevokeResponse'
        default:
          $ref: '#/components/responses/DefaultError'
  /federation/events:
    post:
      tags: [Federation]
      summary: Receive a signed federation event (experimental)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignedFederationEvent'
      responses:
        '202':
          description: Event accepted for processing
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [accepted, duplicate]
        default:
          $ref: '#/components/responses/DefaultError'
  /federation/friend-request:
    post:
      tags: [Federation]
      summary: Submit a federated friend request payload (experimental)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FederatedFriendRequestPayload'
      responses:
        '200':
          description: Request stored
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: accepted
                  request_id:
                    type: string
        default:
          $ref: '#/components/responses/DefaultError'
  /connect:
    post:
      tags: [Real-time]
      summary: CCP-1 streaming session
      description: |
        Initiates the CCP-1 Noise handshake over HTTP/2. The request and response
        bodies remain open for bidirectional frame streaming. See `PROTOCOL.md`
        for bootstrap details.
      responses:
        '200':
          description: Stream established (HTTP/2)
        '400':
          description: Handshake failed
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ProblemDetails'
        '429':
          $ref: '#/components/responses/TooManyRequests'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Session
      description: Session token obtained after Noise bootstrap
  parameters:
    FriendId:
      name: userId
      in: path
      required: true
      description: User identifier or handle
      schema:
        type: string
  responses:
    DefaultError:
      description: Error response
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
    TooManyRequests:
      description: Rate limit exceeded
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until a new attempt is permitted
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetails'
  schemas:
    ProblemDetails:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          default: about:blank
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
    ServerInfoResponse:
      type: object
      properties:
        domain:
          type: string
        noise_public:
          type: string
          description: Hex-encoded Noise static public key currently advertised
        noise_keys:
          type: array
          items:
            $ref: '#/components/schemas/NoiseKeyEntry'
        device_ca_public:
          type: string
        supported_patterns:
          type: array
          items:
            type: string
            enum: [XK, IK]
        supported_versions:
          type: array
          items:
            type: integer
        session:
          $ref: '#/components/schemas/SessionSettings'
        presence:
          type: object
          properties:
            ttl_seconds:
              type: integer
        device_rotation:
          $ref: '#/components/schemas/DeviceRotationSettings'
        pairing:
          type: object
          properties:
            auto_approve:
              type: boolean
            pairing_ttl:
              type: integer
            max_auto_devices:
              type: integer
    NoiseKeyEntry:
      type: object
      properties:
        version:
          type: integer
        public:
          type: string
        valid_after:
          type: string
          format: date-time
        rotates_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
    SessionSettings:
      type: object
      properties:
        ttl_seconds:
          type: integer
        keepalive_interval:
          type: integer
    DeviceRotationSettings:
      type: object
      properties:
        enabled:
          type: boolean
        min_interval_seconds:
          type: integer
        proof_ttl_seconds:
          type: integer
    FriendEntry:
      type: object
      required: [user_id]
      properties:
        user_id:
          type: string
        alias:
          type: string
          nullable: true
    FriendDevice:
      type: object
      properties:
        device_id:
          type: string
        public_key:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        last_rotated_at:
          type: string
          format: date-time
          nullable: true
    FriendListResponse:
      type: object
      properties:
        friends:
          type: array
          items:
            $ref: '#/components/schemas/FriendEntry'
        devices:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/FriendDevice'
    FriendUpdateRequest:
      type: object
      properties:
        friends:
          type: array
          items:
            $ref: '#/components/schemas/FriendEntry'
      required: [friends]
    FriendDevicesResponse:
      type: object
      properties:
        friend:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/FriendDevice'
    AvatarUploadResponse:
      type: object
      properties:
        avatar_url:
          type: string
        filename:
          type: string
    FriendRequestsResponse:
      type: object
      properties:
        incoming:
          type: array
          items:
            $ref: '#/components/schemas/FriendRequest'
        outgoing:
          type: array
          items:
            $ref: '#/components/schemas/FriendRequest'
    FriendRequest:
      type: object
      properties:
        id:
          type: string
        from_user_id:
          type: string
        to_user_id:
          type: string
        status:
          type: string
        message:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    FriendRequestCreate:
      type: object
      properties:
        message:
          type: string
          nullable: true
    FriendRequestEnvelope:
      type: object
      properties:
        request:
          $ref: '#/components/schemas/FriendRequest'
        to_user:
          type: object
          properties:
            user_id:
              type: string
            handle:
              type: string
            display_name:
              type: string
              nullable: true
            avatar_url:
              type: string
              nullable: true
    FriendRequestAcceptResponse:
      type: object
      properties:
        status:
          type: string
        friend:
          $ref: '#/components/schemas/FriendEntry'
    FriendRequestRejectResponse:
      type: object
      properties:
        status:
          type: string
        request_id:
          type: string
    FriendDeleteResponse:
      type: object
      properties:
        status:
          type: string
          example: removed
        user_id:
          type: string
    PairCreateRequest:
      type: object
      properties:
        ttl:
          type: integer
          minimum: 1
          description: Optional lifetime in seconds (capped by server config)
    PairCreateResponse:
      type: object
      properties:
        pair_code:
          type: string
        issued_at:
          type: string
          format: date-time
        expires_at:
          type: string
          format: date-time
        ttl:
          type: integer
        device_seed:
          type: string
        issuer_device_id:
          type: string
        device_ca_public:
          type: string
    PairClaimRequest:
      type: object
      required: [pair_code]
      properties:
        pair_code:
          type: string
        device_name:
          type: string
          nullable: true
    PairClaimResponse:
      type: object
      properties:
        device_id:
          type: string
        private_key:
          type: string
        public_key:
          type: string
        seed:
          type: string
        issuer_device_id:
          type: string
        user_id:
          type: string
        user:
          $ref: '#/components/schemas/UserProfile'
        device_certificate:
          type: object
        device_ca_public:
          type: string
        device_name:
          type: string
          nullable: true
    UserProfile:
      type: object
      properties:
        user_id:
          type: string
        handle:
          type: string
        domain:
          type: string
        display_name:
          type: string
          nullable: true
        avatar_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    P2pAssistRequest:
      type: object
      properties:
        peer_hint:
          type: string
          nullable: true
        paths:
          type: array
          items:
            $ref: '#/components/schemas/P2pPathHint'
        prefer_reality:
          type: boolean
        fec:
          $ref: '#/components/schemas/P2pFecHint'
        min_paths:
          type: integer
          minimum: 1
    P2pPathHint:
      type: object
      properties:
        address:
          type: string
        id:
          type: string
          nullable: true
        port:
          type: integer
          nullable: true
        server_name:
          type: string
          nullable: true
        priority:
          type: integer
          nullable: true
        reality_fingerprint:
          type: string
          nullable: true
        reality_pem:
          type: string
          nullable: true
    P2pFecHint:
      type: object
      properties:
        mtu:
          type: integer
          nullable: true
        repair_overhead:
          type: number
          format: float
          nullable: true
    P2pAssistResponse:
      type: object
      properties:
        noise:
          $ref: '#/components/schemas/NoiseAdvice'
        pq:
          $ref: '#/components/schemas/PqAdvice'
        ice:
          $ref: '#/components/schemas/IceAdvice'
        transports:
          type: array
          items:
            $ref: '#/components/schemas/TransportAdvice'
        multipath:
          $ref: '#/components/schemas/MultipathAdvice'
        obfuscation:
          $ref: '#/components/schemas/ObfuscationAdvice'
        security:
          $ref: '#/components/schemas/SecuritySnapshot'
    NoiseAdvice:
      type: object
      properties:
        pattern:
          type: string
        prologue_hex:
          type: string
        device_seed_hex:
          type: string
        static_public_hex:
          type: string
    PqAdvice:
      type: object
      properties:
        identity_public_hex:
          type: string
        signed_prekey_public_hex:
          type: string
        kem_public_hex:
          type: string
        signature_public_hex:
          type: string
    IceAdvice:
      type: object
      properties:
        username_fragment:
          type: string
        password:
          type: string
        ttl_secs:
          type: integer
        keepalive_interval_secs:
          type: integer
        trickle:
          type: boolean
    TransportAdvice:
      type: object
      properties:
        path_id:
          type: string
        transport:
          type: string
        resistance:
          type: string
        latency:
          type: string
        throughput:
          type: string
    MultipathAdvice:
      type: object
      properties:
        fec_mtu:
          type: integer
        fec_overhead:
          type: number
        primary_path:
          type: string
          nullable: true
        sample_segments:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/SampleBreakdown'
    SampleBreakdown:
      type: object
      properties:
        total:
          type: integer
        repair:
          type: integer
    ObfuscationAdvice:
      type: object
      properties:
        reality_fingerprint_hex:
          type: string
          nullable: true
        domain_fronting:
          type: boolean
        protocol_mimicry:
          type: boolean
        tor_bridge:
          type: boolean
    SecuritySnapshot:
      type: object
      properties:
        noise_handshakes:
          type: integer
        pq_handshakes:
          type: integer
        fec_packets:
          type: integer
        multipath_sessions:
          type: integer
        average_paths:
          type: number
          format: float
        censorship_deflections:
          type: integer
    DeviceRotationRequest:
      type: object
      required: [public_key, signature, expires_at]
      properties:
        public_key:
          type: string
        signature:
          type: string
        expires_at:
          type: string
        nonce:
          type: string
          nullable: true
    DeviceRotationResponse:
      type: object
      properties:
        device_id:
          type: string
        user_id:
          type: string
        public_key:
          type: string
        old_public_key:
          type: string
        rotation_id:
          type: string
        event_id:
          type: string
        applied_at:
          type: string
          format: date-time
        proof_expires_at:
          type: string
          format: date-time
        certificate:
          type: object
    DevicesListResponse:
      type: object
      properties:
        devices:
          type: array
          items:
            $ref: '#/components/schemas/DeviceSummary'
    DeviceSummary:
      type: object
      properties:
        device_id:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        public_key:
          type: string
        current:
          type: boolean
    DeviceRevokeRequest:
      type: object
      required: [device_id]
      properties:
        device_id:
          type: string
    DeviceRevokeResponse:
      type: object
      properties:
        device_id:
          type: string
        status:
          type: string
    SignedFederationEvent:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/FederationEvent'
        signature:
          type: array
          items:
            type: integer
            format: uint8
        digest:
          type: array
          items:
            type: integer
            format: uint8
    FederationEvent:
      type: object
      properties:
        event_id:
          type: string
        origin:
          type: string
        created_at:
          type: string
          format: date-time
        payload:
          type: object
        scope:
          type: string
    FederatedFriendRequestPayload:
      type: object
      required: [type, request_id, from, to, signature]
      properties:
        type:
          type: string
          enum: [friend_request]
        request_id:
          type: string
        from:
          type: string
        to:
          type: string
        message:
          type: string
          nullable: true
        signature:
          type: string
